import os
import sys

# Ensure that a virtualenv is active before importing non-stdlib dependencies.
venv = os.environ.get('VIRTUAL_ENV')
if not venv:
    sys.exit('--> an active virtualenv is required'.format(venv))

# Explicit imports keep linters happy.
from SCons.Script import (SConscript, Environment, Variables, PathVariable, Alias)

from bioscons.setup import envsetup, helpsetup

# Define the execution PATH. Replace `os.environ['PATH']` with a list
# of directories for a more reproducible environment.
PATH = ':'.join([
    'bin',
    os.path.join(venv, 'bin'),
    os.environ['PATH']
])

vars = Variables()
# Place all output files in $out
vars.Add(PathVariable('out', 'output directory', 'output',
                      PathVariable.PathIsDirCreate))

env = envsetup(vars=vars, PATH=PATH)

# Commands go here.
foo = env.Command(
    target='$out/foo.txt',
    source=None,
    action='echo foo > $TARGET'
)
env.Clean(foo, '$out')  # `scons --clean` removes env['out']
Alias('foo', foo)

for i in range(1, 5):
    # Use a copy of the Environment object when iterating.
    e = env.Clone(out='$out/subdir_{}'.format(i), i=i)
    file_i = e.Command(
        target='$out/count.txt',
        source=foo,
        action='for i in {1..$i}; do echo $i; done > $TARGET'
    )
    e.Clean(file_i, '$out')  # `scons --clean` removes e['out']

# Run a subsidiary SConscript using the same environment; see
# http://www.scons.org/doc/production/HTML/scons-user.html#chap-hierarchical
returned = SConscript('SConscript', ['env', 'foo'])

helpsetup(vars, env)
