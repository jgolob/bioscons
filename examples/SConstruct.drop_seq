"""
Create an exhaustive set of leave-one-out trees using RAxML
"""

import os
import sys
from os.path import join,split,splitext
import re
import pprint
import glob

import Seq
import sconstools

# check timestamps before calculating md5 checksums
# see http://www.scons.org/doc/production/HTML/scons-user.html#AEN929
Decider('MD5-timestamp')

vars = Variables()
vars.Add('RAxML','raxml executable','raxmlHPC-SSE3')
vars.Add('RAxML_threaded','raxml executable (threaded)','raxmlHPC-PTHREADS-SSE3')
vars.Add('raxml_threads', '', 1)

# env
env = Environment(ENV=os.environ, variables=vars)

### builders
# env['BUILDERS']['RScript2'] = sconstools.builders.RScript2

# ??: we are adding RAxML to our collection of builders?
env['BUILDERS']['raxml'] = sconstools.builders.raxml

indir = 'input'
outdir = 'output'

aln_in = join(indir,'test_aln.fasta')

seqs = Seq.io_fasta.read(open(aln_in).read())
nseqs = len(seqs)

treefiles = []
for i in range(nseqs):
    # zfill for fixed width
    # join intelligently puts together file name components (part of os.path)
    pth = join(outdir, str(i).zfill(3))

    # Command is for when we want to run something in the shell
    # ??: How does it work with the plural of TARGET and SOURCE? Is that for when those things are lists?
    fasta, phylip = env.Command(
    # "flatten" Flattens a sequence to a non-nested list.
    # ??: how is this a nested list?
    # we set our target to be a list
        target = Flatten([join(pth,'aln.fasta'), join(pth,'aln.phy')]),
        source = aln_in,
        action = 'python remove_one.py %s $SOURCE $TARGETS' % i
        )
    # setting up a dependency on the script
    Depends(fasta, 'remove_one.py')

    raxinfo, raxtree = env.raxml(source=phylip)
    treefiles.append(raxtree)

treelist = env.Command(
    source = treefiles,
    target = join(outdir,'treelist.txt'),
    action = 'ls $SOURCES > $TARGET'
    )
